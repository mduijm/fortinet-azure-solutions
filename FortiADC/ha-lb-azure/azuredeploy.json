{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine"
      }
    },
    "fortiADCNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Naming prefix for all deployed resources"
      }
    },
    "fortiADCImageSKU": {
      "type": "string",
      "defaultValue": "fad-vm-byol",
      "allowedValues": [
        "fad-vm-byol",
        "fortinet-fad-vm_payg-100mbps",
        "fortinet-fad-vm_payg-10gbps",
        "fortinet-fad-vm_payg-1gbps",
        "fortinet-fad-vm_payg-500mbps",
        "fortinet-fad-vm_payg-5gbps"
      ],
      "metadata": {
        "description": "Identifies whether to to use PAYG (on demand licensing) or BYOL license model (where license is purchased separately)"
      }
    },
    "fortiADCImageVersion": {
      "type": "string",
      "defaultValue": "latest",
      "allowedValues": [
        "5.3.2",
        "latest"
      ],
      "metadata": {
        "description": "*****"
      }
    },
    "instanceType": {
      "type": "string",
      "defaultValue": "Standard_F4s",
      "allowedValues": [ "Standard_F4s", "Standard_F8s", "Standard_F16s", "Standard_F4", "Standard_F8", "Standard_F16", "Standard_F8s_v2", "Standard_F16s_v2", "Standard_F32s_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2", "Standard_D8s_v3", "Standard_D16s_v3", "Standard_D32s_v3"],
      "metadata": {
        "description": "Virtual Machine size selection - must be F4 or other instance that supports 4 NICs"
      }
    },
    "acceleratedNetworking": {
      "type": "string",
      "defaultValue": "true",
      "allowedValues": [ "true", "false" ],
      "metadata": {
        "description": "Accelerated Networking enables direct connection between the VM and network card. Only available on 2 CPU D/DSv2 and F/Fs and 4 CPU D/Dsv3, E/Esv3, Fsv2, Lsv2, Ms/Mms and Ms/Mmsv2"
      }
    },
    "publicIPNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify if to use a public IP, and if so whether it's new"
      }
    },
    "publicIP2NewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Whether to use a public IP and if so whether it is new"
      }
    },
    "publicIPName": {
      "type": "string",
      "defaultValue": "FGTAPClusterPublicIP",
      "metadata": {
        "description": "Name of Public IP address element."
      }
    },
    "publicIPResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs."
      }
    },
    "publicIP2Name": {
      "type": "string",
      "defaultValue": "FADAMgmtPublicIP",
      "metadata": {
        "description": "Name of Public IP address element."
      }
    },
    "publicIP2ResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource group to which the Public IP belongs."
      }
    },
    "publicIPAddressType": {
      "type": "string",
      "defaultValue": "Static",
      "allowedValues": [
        "Dynamic",
        "Static"
      ],
      "metadata": {
        "description": "Type of public IP address"
      }
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Identify whether to use a new or existing vnet"
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the Azure virtual network."
      }
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource Group containing the virtual network - or new resource group from above (if new vnet)"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/22",
      "metadata": {
        "description": "Virtual Network Address prefix"
      }
    },
    "subnet1Name": {
      "type": "string",
      "defaultValue": "ExternalSubnet",
      "metadata": {
        "description": "Subnet 1 Name"
      }
    },
    "subnet1Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.0/26",
      "metadata": {
        "description": "Subnet 1 Prefix"
      }
    },
    "subnet2Name": {
      "type": "string",
      "defaultValue": "InternalSubnet",
      "metadata": {
        "description": "Subnet 2 Name"
      }
    },
    "subnet2Prefix": {
      "type": "string",
      "defaultValue": "172.16.136.64/26",
      "metadata": {
        "description": "Subnet 2 Prefix"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "fortinetTags": {
      "type": "object",
      "defaultValue": {
        "publisher": "Fortinet",
        "template": "Active-Passive-ELB-ADC",
        "provider": "6EB3B02F-50E5-4A3E-8CB8-2E12925831AP"
      }
    }
  },
  "variables": {
    "fnAvailabilitySetName": "[concat(parameters('fortiADCNamePrefix'),'-AvailabilitySet')]",
    "fnAvailabilitySetId": "[resourceId('Microsoft.Compute/availabilitySets', variables('fnAvailabilitySetName'))]",

    "vnetName": "[if(equals(parameters('vnetName'),''),concat(parameters('fortiADCNamePrefix'),'-VNET'),parameters('vnetName'))]",
    "subnet1Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet1Name')))]",
    "subnet2Id": "[if(equals(parameters('vnetNewOrExisting'),'new'),resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')),resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'),parameters('subnet2Name')))]",
    "fadaVmName": "[concat(parameters('fortiADCNamePrefix'),'-FAD-A')]",
    "fadbVmName": "[concat(parameters('fortiADCNamePrefix'),'-FAD-B')]",
    "routeTableName": "FADDefaultAPRouteTable",
    "routeTableId": "[resourceId('Microsoft.Network/routeTables',variables('routeTableName'))]",

    "fgaNic1Name": "[concat(variables('fgaVmName'),'-Nic1')]",
    "fgaNic1Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgaNic1Name'))]",
    "fgaNic2Name": "[concat(variables('fgaVmName'),'-Nic2')]",
    "fgaNic2Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgaNic2Name'))]",
    "fgbNic1Name": "[concat(variables('fgbVmName'),'-Nic1')]",
    "fgbNic1Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgbNic1Name'))]",
    "fgbNic2Name": "[concat(variables('fgbVmName'),'-Nic2')]",
    "fgbNic2Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgbNic2Name'))]",
    "fgaNic3Name": "[concat(variables('fgaVmName'),'-Nic3')]",
    "fgaNic3Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgaNic3Name'))]",
    "fgbNic3Name": "[concat(variables('fgbVmName'),'-Nic3')]",
    "fgbNic3Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgbNic3Name'))]",
    "fgaNic4Name": "[concat(variables('fgaVmName'),'-Nic4')]",
    "fgaNic4Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgaNic4Name'))]",
    "fgbNic4Name": "[concat(variables('fgbVmName'),'-Nic4')]",
    "fgbNic4Id": "[resourceId('Microsoft.Network/networkInterfaces',variables('fgbNic4Name'))]",

    "publicIPName": "[if(equals(parameters('publicIPName'),''),concat(parameters('fortiADCNamePrefix'),'-FGT-PIP'),parameters('publicIPName'))]",
    "publicIPId": "[if(equals(parameters('publicIPNewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName')),resourceId(parameters('publicIPResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIPName')))]",
    "publicIP2Name": "[if(equals(parameters('publicIP2Name'),''),concat(parameters('fortiADCNamePrefix'),'-FGT-A-MGMT-PIP'),parameters('publicIP2Name'))]",
    "publicIP2Id": "[if(equals(parameters('publicIP2NewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIP2Name')),resourceId(parameters('publicIP2ResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIP2Name')))]",
    "publicIP3Name": "[if(equals(parameters('publicIP3Name'),''),concat(parameters('fortiADCNamePrefix'),'-FGT-B-MGMT-PIP'),parameters('publicIP3Name'))]",
    "publicIP3Id": "[if(equals(parameters('publicIP3NewOrExisting'),'new'),resourceId('Microsoft.Network/publicIPAddresses',variables('publicIP3Name')),resourceId(parameters('publicIP3ResourceGroup'),'Microsoft.Network/publicIPAddresses',variables('publicIP3Name')))]",

    "NSGName": "[concat(parameters('fortiADCNamePrefix'),'-',uniqueString(resourceGroup().id),'-NSG')]",
    "NSGId": "[resourceID('Microsoft.Network/networkSecurityGroups/',variables('NSGName'))]",

    "sn1IPArray": "[split(parameters('subnet1Prefix'),'.')]",
    "sn1IPArray2ndString": "[string(variables('sn1IPArray')[3])]",
    "sn1IPArray2nd": "[split(variables('sn1IPArray2ndString'),'/')]",
    "sn1CIDRmask": "[string(int(variables('sn1IPArray2nd')[1]))]",
    "sn1IPArray3": "[string(add(int(variables('sn1IPArray2nd')[0]),1))]",
    "sn1IPArray2": "[string(int(variables('sn1IPArray')[2]))]",
    "sn1IPArray1": "[string(int(variables('sn1IPArray')[1]))]",
    "sn1IPArray0": "[string(int(variables('sn1IPArray')[0]))]",
    "sn1GatewayIP": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',variables('sn1IPArray3'))]",
    "sn1IPfga": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',add(int(variables('sn1IPArray2nd')[0]),5))]",
    "sn1IPfgb": "[concat(variables('sn1IPArray0'),'.',variables('sn1IPArray1'),'.',variables('sn1IPArray2'),'.',add(int(variables('sn1IPArray2nd')[0]),6))]",

    "sn2IPArray": "[split(parameters('subnet2Prefix'),'.')]",
    "sn2IPArray2ndString": "[string(variables('sn2IPArray')[3])]",
    "sn2IPArray2nd": "[split(variables('sn2IPArray2ndString'),'/')]",
    "sn2CIDRmask": "[string(int(variables('sn2IPArray2nd')[1]))]",
    "sn2IPArray3": "[string(add(int(variables('sn2IPArray2nd')[0]),1))]",
    "sn2IPArray2": "[string(int(variables('sn2IPArray')[2]))]",
    "sn2IPArray1": "[string(int(variables('sn2IPArray')[1]))]",
    "sn2IPArray0": "[string(int(variables('sn2IPArray')[0]))]",
    "sn2GatewayIP": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',variables('sn2IPArray3'))]",
    "sn2IPlb": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),4))]",
    "sn2IPfga": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),5))]",
    "sn2IPfgb": "[concat(variables('sn2IPArray0'),'.',variables('sn2IPArray1'),'.',variables('sn2IPArray2'),'.',add(int(variables('sn2IPArray2nd')[0]),6))]",

    "sn3IPArray": "[split(parameters('subnet3Prefix'),'.')]",
    "sn3IPArray2ndString": "[string(variables('sn3IPArray')[3])]",
    "sn3IPArray2nd": "[split(variables('sn3IPArray2ndString'),'/')]",
    "sn3CIDRmask": "[string(int(variables('sn3IPArray2nd')[1]))]",
    "sn3IPArray2": "[string(int(variables('sn3IPArray')[2]))]",
    "sn3IPArray1": "[string(int(variables('sn3IPArray')[1]))]",
    "sn3IPArray0": "[string(int(variables('sn3IPArray')[0]))]",
    "sn3IPfga": "[concat(variables('sn3IPArray0'),'.',variables('sn3IPArray1'),'.',variables('sn3IPArray2'),'.',add(int(variables('sn3IPArray2nd')[0]),5))]",
    "sn3IPfgb": "[concat(variables('sn3IPArray0'),'.',variables('sn3IPArray1'),'.',variables('sn3IPArray2'),'.',add(int(variables('sn3IPArray2nd')[0]),6))]",

    "sn4IPArray": "[split(parameters('subnet4Prefix'),'.')]",
    "sn4IPArray2ndString": "[string(variables('sn4IPArray')[3])]",
    "sn4IPArray2nd": "[split(variables('sn4IPArray2ndString'),'/')]",
    "sn4CIDRmask": "[string(int(variables('sn4IPArray2nd')[1]))]",
    "sn4IPArray3": "[string(add(int(variables('sn4IPArray2nd')[0]),1))]",
    "sn4IPArray2": "[string(int(variables('sn4IPArray')[2]))]",
    "sn4IPArray1": "[string(int(variables('sn4IPArray')[1]))]",
    "sn4IPArray0": "[string(int(variables('sn4IPArray')[0]))]",
    "sn4GatewayIP": "[concat(variables('sn4IPArray0'),'.',variables('sn4IPArray1'),'.',variables('sn4IPArray2'),'.',variables('sn4IPArray3'))]",
    "sn4IPfga": "[concat(variables('sn4IPArray0'),'.',variables('sn4IPArray1'),'.',variables('sn4IPArray2'),'.',add(int(variables('sn4IPArray2nd')[0]),5))]",
    "sn4IPfgb": "[concat(variables('sn4IPArray0'),'.',variables('sn4IPArray1'),'.',variables('sn4IPArray2'),'.',add(int(variables('sn4IPArray2nd')[0]),6))]",

    "internalLBName": "[concat(parameters('fortiADCNamePrefix'),'-InternalLoadBalancer')]",
    "internalLBId": "[resourceID('Microsoft.Network/loadBalancers',variables('internalLBName'))]",
    "internalLBFEName": "[concat(parameters('fortiADCNamePrefix'),'-ILB-',parameters('subnet2Name'),'-FrontEnd')]",
    "internalLBFEId": "[resourceID('Microsoft.Network/loadBalancers/frontendIPConfigurations/',variables('internalLBName'),variables('internalLBFEName'))]",
    "internalLBBEName": "[concat(parameters('fortiADCNamePrefix'),'-ILB-',parameters('subnet2Name'),'-BackEnd')]",
    "internalLBBEId": "[resourceID('Microsoft.Network/loadBalancers/backendAddressPools/',variables('internalLBName'),variables('internalLBBEName'))]",
    "internalLBProbeName": "lbprobe",
    "internalLBProbeId": "[resourceId('Microsoft.Network/loadBalancers/probes/',variables('internalLBName'),variables('internalLBProbeName'))]",

    "externalLBName": "[concat(parameters('fortiADCNamePrefix'),'-ExternalLoadBalancer')]",
    "externalLBId": "[resourceId('Microsoft.Network/loadBalancers',variables('externalLBName'))]",
    "externalLBFEName": "[concat(parameters('fortiADCNamePrefix'),'-ELB-',parameters('subnet1Name'),'-FrontEnd')]",
    "externalLBFEId": "[resourceID('Microsoft.Network/loadBalancers/frontendIPConfigurations/',variables('externalLBName'),variables('externalLBFEName'))]",
    "externalLBBEName": "[concat(parameters('fortiADCNamePrefix'),'-ILB-',parameters('subnet1Name'),'-BackEnd')]",
    "externalLBBEId": "[resourceID('Microsoft.Network/loadBalancers/backendAddressPools/',variables('externalLBName'),variables('externalLBBEName'))]",
    "externalLBProbeName": "lbprobe",
    "externalLBProbeId": "[resourceId('Microsoft.Network/loadBalancers/probes/',variables('externalLBName'),variables('externalLBProbeName'))]"
  },
  "resources": [
    {
      "apiVersion": "2019-10-01",
      "name": "pid-2dc4b447-552f-557f-b1cc-2faec6f9f133",
      "type": "Microsoft.Resources/deployments",
      "properties":{
       "mode": "Incremental",
       "template": {
         "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deplymentTemplate.json#",
         "contentVersion": "1.0.0.0",
         "resources": []
       }
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('fnAvailabilitySetName')]",
      "apiVersion": "2019-12-01",
      "tags": {
       "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "location": "[parameters('location')]",
      "properties": {
        "platformFaultDomainCount": 2,
        "platformUpdateDomainCount": 2
      },
      "sku": {
        "name":  "Aligned"
      }
    },
  {
      "apiVersion": "2020-04-01",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('externalLBName')]",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "sku":
      {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('publicIPId')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('externalLBFEName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPId')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('externalLBBEName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('externalLBBEId')]"
              },
              "probe": {
                "id": "[variables('externalLBProbeId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "ExternalLBRule-FE-http"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "backendAddressPool": {
                "id": "[variables('externalLBBEId')]"
              },
              "probe": {
                "id": "[variables('externalLBProbeId')]"
              },
              "protocol": "Udp",
              "frontendPort": 10551,
              "backendPort": 10551,
              "enableFloatingIP": true,
              "idleTimeoutInMinutes": 5
            },
            "name": "ExternalLBRule-FE-udp10551"
          }
        ],
        "inboundNatRules": [
          {
            "name": "[variables('externalLBName_NatRule_SSH_fga')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 50030,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_FGAdminPerm_fga')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 40030,
              "backendPort": 443,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_SSH_fgb')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 50031,
              "backendPort": 22,
              "enableFloatingIP": false
            }
          },
          {
            "name": "[variables('externalLBName_NatRule_FGAdminPerm_fgb')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('externalLBFEId')]"
              },
              "protocol": "Tcp",
              "frontendPort": 40031,
              "backendPort": 443,
              "enableFloatingIP": false
            }
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 8008,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "lbprobe"
          }
        ]
      }
    },
    {
      "apiVersion": "2020-04-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgaNic1Name')]",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "dependsOn": [
        "[variables('externalLBId')]",
        "[variables('vnetName')]",
        "[variables('nsgId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfga')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet1Id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('externalLBBEId')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[variables('externalLBId_NatRule_SSH_fga')]"
                },
                {
                  "id": "[variables('externalLBId_NatRule_FGAdminPerm_fga')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[variables('nsgId')]"
        }
      }
    },
    {
      "apiVersion": "2020-04-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgbNic1Name')]",
      "location": "[parameters('location')]",
      "tags": {
        "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "dependsOn": [
        "[variables('externalLBId')]",
        "[variables('fgaNic1Id')]",
        "[variables('vnetName')]",
        "[variables('nsgId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn1IPfgb')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet1Id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('externalLBBEId')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[variables('externalLBId_NatRule_SSH_fgb')]"
                },
                {
                  "id": "[variables('externalLBId_NatRule_FGAdminPerm_fgb')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true,
        "networkSecurityGroup": {
          "id": "[variables('nsgId')]"
        }
      }
    },
    {
      "apiVersion": "2020-04-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgaNic2Name')]",
      "location": "[parameters('location')]",
      "tags": {
       "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "dependsOn": [
        "[variables('internalLBId')]",
        "[variables('vnetName')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn2IPfga')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('internalLBBEId')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true
      }
    },
    {
      "apiVersion": "2020-04-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('fgbNic2Name')]",
      "location": "[parameters('location')]",
      "tags": {
       "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "dependsOn": [
        "[variables('internalLBId')]",
        "[variables('vnetName')]",
        "[variables('fgaNic2Id')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('sn2IPfgb')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('internalLBBEId')]"
                }
              ]
            }
          }
        ],
        "enableIPForwarding": true
      }
    },
    {
      "apiVersion": "2019-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fgaVmName')]",
      "location": "[parameters('location')]",
      "tags": {
       "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "plan": {
        "name": "[parameters('fortigateImageSKU')]",
        "publisher": "[variables('imagePublisher')]",
        "product": "[variables('imageOffer')]"
      },
      "dependsOn": [
        "[variables('fgaNic1Id')]",
        "[variables('fgaNic2Id')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "availabilitySet": {
          "id": "[variables('availabilitySetId')]"
        },
        "osProfile": {
          "computerName": "[variables('fgaVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[variables('fgaCustomData')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('fortigateImageSKU')]",
            "version": "[parameters('fortigateImageVersion')]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('fgaNic1Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('fgaNic2Id')]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2019-12-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('fgbVmName')]",
      "location": "[parameters('location')]",
      "tags": {
       "provider": "[toUpper(parameters('fortinetTags').provider)]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "plan": {
        "name": "[parameters('fortigateImageSKU')]",
        "publisher": "[variables('imagePublisher')]",
        "product": "[variables('imageOffer')]"
      },
      "dependsOn": [
        "[variables('fgbNic1Id')]",
        "[variables('fgbNic2Id')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "availabilitySet": {
          "id": "[variables('availabilitySetId')]"
        },
        "osProfile": {
          "computerName": "[variables('fgbVmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "customData": "[variables('fgbCustomData')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[parameters('fortigateImageSKU')]",
            "version": "[parameters('fortigateImageVersion')]"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 30,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[variables('fgbNic1Id')]"
            },
            {
              "properties": {
                "primary": false
              },
              "id": "[variables('fgbNic2Id')]"
            }
          ]
        }
      }
    }
    
  ]
  }
